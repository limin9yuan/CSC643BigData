# Copyright 2017 team1@course_bigdata Saint Joseph's University
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.


Description
-----------
The following source lines are the queries for MongoDB command-line client.
The queries are from the project requirements:
    a)    Find the total number of cities in the database.
    b)    Create the list of states, cities, and city populations.
    c)    List the cities in the state of Massachusetts with populations between 1000 and 2000.
    d)    Write a mapReducer to compute the total number of cities and total population in each state.
    e)    Write a mapReducer to find the average city population for each state.
    f)    Write a mapReducer to find the least densely-populated state(s).


Prerequisites
------------
To be able to run the queries, the following steps must be done beforehand:
    - Install and run MongoDB server instance properly
    - Import the data from zipcodes.json to your MongoDB server instance
    - MongoDB command-line client is running and its interpreter is launched and ready


Queries
-------
For demonstration, 'zipcodes' is used as the database name and the collection name.
Before running the queries, do the following two commands:
    > use zipcodes
    > z = db.zipcodes;


a)    Find the total number of cities in the database.

    > z.distinct("city").length;
    16584
    >

b)    Create the list of states, cities, and city populations.
    > db.zipcodes.aggregate([
    ... {$project: {state: 1, city: 1, pop: 1}},
    ... {$group: {
    ...     _id: {"state": "$state", "city": "$city"},
    ...     popTotal: {$sum: "$pop"}, }},
    ... {$sort: {state: 1}} ]);

c)    List the cities in the state of Massachusetts with populations between 1000 and 2000.
    > db.zipcodes.aggregate([
    ... {$match: {$and: [{state: "MA"}, {pop: {$gte: 1000, $lte: 2000}}]}},
    ... {$group: {
            _id: {"state": "$state", "city": "$city"},
    ...     popTotal: {$sum: "$pop"}}},
    ... ]);

d)    Write a mapReducer to compute the total number of cities and total population in each state.

    > var map = function() {
    ...     emit(this.state, {city: [this.city], pop: this.pop});
    ... };
    >
    > var reducer = function(key, values) {
    ...     var res = {city: [], pop: 0};
    ...     for (var i = 0; i < values.length; ++i) {
    ...         var val = values[i];
    ...         res.pop += val.pop;
    ...         res.city = res.city.concat(val.city);
    ...     }
    ...     res.city = res.city.filter((elem, index) =>  res.city.indexOf(elem) === index);
    ...     return res;
    ... };
    >
    >
    > var finalizer = function(key, reducedValue) {
    ...     reducedValue.cityCount = reducedValue.city.length;
    ...     return reducedValue;
    ... };
    >
    > var r = z.mapReduce(map, reducer, {out: "state_pop_city_count", finalize:finalizer});
    > var cur = r.find();
    > while (cur.hasNext()) {
    ... var doc = cur.next();
    ... print(doc._id, ": (pop:", doc.value.pop, ", cityCount:", doc.value.cityCount, ")");
    ... };

e)    Write a mapReducer to find the average city population for each state.

    > var map = function() {
    ...     emit(this.state, {city: [this.city], pop: this.pop});
    ... };
    >
    > var reducer = function(key, values) {
    ...     var res = {city: [], pop: 0};
    ...     for (var i = 0; i < values.length; ++i) {
    ...         var val = values[i];
    ...         res.pop += val.pop;
    ...         res.city = res.city.concat(val.city);
    ...     }
    ...     res.city = res.city.filter((elem, index) =>  res.city.indexOf(elem) === index);
    ...     return res;
    ... };
    >
    >
    > var finalizer = function(key, reducedValue) {
    ...     reducedValue.cityCount = reducedValue.city.length;
    ...     reducedValue.avgPop = reducedValue.pop / reducedValue.cityCount;
    ...     return reducedValue;
    ... };
    > var r = z.mapReduce(map, reducer, {out: "state_avg_pop", finalize:finalizer});
    > var cur = r.find();
    > while (cur.hasNext()) {
    ... var doc = cur.next();
    ... print(doc._id, ": (pop:", doc.value.pop, ", cityCount:", doc.value.cityCount, ", avgPop:", doc.value.avgPop, ")");
    ... };

f)    Write a mapReducer to find the least densely-populated state(s).
    > var map = function() { emit(this.state, this.pop); };
    > var reducer = function(state, pop) { return Array.sum(pop); };
    > var r = z.mapReduce(map, reducer, {out: "state_pop"});
    > r.find().sort({value: 1}).limit(1);
